function cut_rotated_grain(theta,GS)
seed_file_name = [num2str(theta) '.master_rot'];
cut_gridX = GS(1); %number of grids for the final cut
cut_gridY = GS(2); %number of grids for the final cut
cut_sizeX = GS(3); %cutting size
cut_sizeY = GS(4); %cutting size
%% Read Header
fid = fopen(seed_file_name,'r');
numLines = textscan(fid,'%n');
numLines = numLines{1} + 1;
header_text = cell(numLines,1);
for i = 1:numLines
    header_text(i) = {fgetl(fid)};
end
header_text{1} = [num2str(numLines-1),'	',header_text{1}];
fclose(fid);
%% Find the positions of the needed data in the geometry file
ind_grid = find(~cellfun(@isempty,strfind(header_text,'grid	a')));
ind_size = find(~cellfun(@isempty,strfind(header_text,'size	x')));
ind_orig = find(~cellfun(@isempty,strfind(header_text,'origin	x')));
ind_homogen_number = ...
    find(~cellfun(@isempty,strfind(header_text,'homogenization	')));
ind_micro_number = ...
    find(~cellfun(@isempty,strfind(header_text,'microstructures	')));
ind_micro = ...
    find(~cellfun(@isempty,strfind(header_text,'<microstructure>')));
ind_text = ...
    find(~cellfun(@isempty,strfind(header_text,'<texture>')));
%% Extract the number of grids and overwrite the sample's size and origin
grids(1:3) = sscanf(char(header_text(ind_grid ,:)),...
    'grid	a %f	b %f	c %f')';
header_text{ind_grid,1} = ['grid	a ' num2str(cut_gridX) ...
    '	b ' num2str(cut_gridY) ...
    '	c ' num2str(grids(3))];

geom_size(1:3)  = sscanf(char(header_text(ind_size,:)),...
    'size	x %f	y %f	z %f')';
header_text{ind_size,1} = ['size	x ' num2str(cut_sizeX) ...
    '	y ' num2str(cut_sizeY) ...
    '	z ' num2str(geom_size(3))];

geom_orig(1:3)  = sscanf(char(header_text(ind_orig,:)),...
    'origin	x %f	y %f	z %f')';
header_text{ind_orig,1} = ['origin	x ' num2str(0) ...
    '	y ' num2str(0) ...
    '	z ' num2str(geom_orig(3))];
%% Read grains & Cut
grains = dlmread(seed_file_name,'',numLines,0);
% Find the maximum number of grains within the cut sample
max_grain = floor(max(grains(:))/9);
% Cut the middle part of the master geometry
j = 1;
for i = 1:grids(2):size(grains,1)
    grain_temp = grains(i:i+grids(2)-1,:);
    if(mod(size(grain_temp,1),2))
        grain_temp(1,:) = [];
    end
    if(mod(size(grain_temp,2),2))
        grain_temp(:,end) = [];
    end
    x_cut = floor((grids(1) - cut_gridX) / 2);
    y_cut = floor((grids(2) - cut_gridY) / 2);
    grain_temp(1:x_cut,:) = [];
    grain_temp(:,1:y_cut) = [];
    
    x_cut = size(grain_temp,1)-cut_gridX-1;
    y_cut = size(grain_temp,2)-cut_gridY-1;
    grain_temp(end-x_cut:end,:) = [];
    grain_temp(:,end-y_cut:end) = [];
    
    new_grain(j:j+cut_gridX-1,:) = grain_temp;
    j = j + cut_gridX;
end
%% Preparing the new lists of microstructures and textures
list_new_geom = unique(new_grain);
for i = 1:size(list_new_geom,1)
    list_exist_grain(i,1) = ...
        cellstr(['[grain' num2str(list_new_geom(i)) ']']);
    list_grainNumber_new(i,1) = mod(list_new_geom(i),max_grain);
    if list_grainNumber_new(i,1)==0;list_grainNumber_new(i,1)=max_grain;end
    list_grain_new(i,1) = ...
        cellstr(['[grain' num2str(list_grainNumber_new(i,1)) ']']);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%If grain's number in the cut is not continuous, it will make some error in
%DAMASK. Therefore, the list should be complete! To do so, the remaining
%and non-existing grains should be mentioned in the lists. Becuase their
%values are not going to be used, any data (but with a correct format) is
%needed.
%
%Prepare the non-existing grains.
list_new_geom = unique(mod(list_new_geom,max_grain));
list_new_geom(list_new_geom == 0) = max_grain;
list_new_geom = sort(list_new_geom);
full_list = linspace(1,max_grain,max_grain)';
non_existing = find(~ismember(full_list,list_new_geom));
%The formatting of the original geom file might be different from the
%master file generated by "create_master_geom.m". To avoid further
%problems, adding the value of "max_grain" to the identified non_existing
%grain numbers assures that the values are within the generated file by 
%this lab.
non_existing = non_existing + max_grain;
%Make a dummy list of non_existing grains.
for i = 1:size(non_existing,1)
    list_exist_grain(end+1,1) = ...
        cellstr(['[grain' num2str(non_existing(i)) ']']);
    list_grainNumber_new(end+1,1) = mod(non_existing(i),max_grain);
    if list_grainNumber_new(end,1) == 0
        list_grainNumber_new(end,1) = max_grain;
    end
    list_grain_new(end+1,1) = ...
        cellstr(['[grain' num2str(list_grainNumber_new(end,1)) ']']);
end

%Prepare the lists for microstructures and textures
list_micro = header_text(ind_micro+1:ind_text-1);
list_text  = header_text(ind_text+1:numLines);
%Find the indeces of the existing micro and text on the lists
[~,member_micro] = ismember(list_exist_grain,list_micro);
[~,member_text]  = ismember(list_exist_grain,list_text);
%Read the microstructre and texture from the lists
member_micro_l2 = list_micro((member_micro+1));
member_micro_l3 = list_micro((member_micro+2));
member_text_l2  = list_text((member_text+1));
%Remove the duplicates
[list_grain_new,ind] = unique(list_grain_new);
member_micro_l2 = member_micro_l2(ind);
member_micro_l3 = member_micro_l3(ind);
member_text_l2 = member_text_l2(ind);
%Re-evaluate the phi1 angle from orientation of each grain
for i = 1:size(ind,1)
    phi_init = sscanf(char(member_text_l2(i ,:)),...
        '(gauss)	phi1 %f')';
    member_text_l2{i,1} = strrep(member_text_l2{i,1}, ...
        ['(gauss)	phi1 ' num2str(phi_init)], ...
        ['(gauss)	phi1 ' num2str(phi_init-theta)]);
end
%Combine the list lines
list_micro_new = [list_grain_new member_micro_l2 member_micro_l3]';
list_micro_new = list_micro_new(:);
list_text_new = [list_grain_new member_text_l2]';
list_text_new = list_text_new(:);
%% Finalizing the new geom file
% Correct the number of grains in the header
header_text{ind_micro_number,1} = ...
    ['microstructures	' num2str(size(list_grain_new,1))];
% Preparing the new header
new_header = vertcat(header_text(1),header_text(ind_grid), ...
    header_text(ind_size), header_text(ind_orig), ...
    header_text(ind_homogen_number), header_text(ind_micro_number));

new_header(end+1) = cellstr('<microstructure>');
new_header = vertcat(new_header,list_micro_new);
new_header(end+1) = cellstr('<texture>');
new_header = vertcat(new_header,list_text_new);
numLines = size(new_header,1);
new_header{1,1} = [num2str(numLines-1) ' header'];
%Renumber the grains
new_grain = mod(new_grain,max_grain);
false_number = new_grain==0;
new_grain(false_number) = max_grain;
%% Write Header + Rotated Values
fid = fopen('headerFile.txt','w');
for i = 1:numLines
    fprintf(fid,'%s\n',new_header{i});
end
% your_first_value = fscanf(fid,'%d',1);
fclose(fid);
new_grain = table(new_grain);
writetable(new_grain,'grains.txt',...
    'delimiter','\t','WriteVariableNames',0);

if exist('cut.geom')
    system('rm cut.geom');
end
system('touch cut.geom');
system('cat headerFile.txt >> cut.geom');
system('cat grains.txt >> cut.geom');
system('rm headerFile.txt');
system('rm grains.txt');
%% Save <microstructre> and <texture> lists in data files
fid = fopen('microstructure.data','w');
for i = 1:size(list_micro_new,1)
    fprintf(fid,'%s\n',list_micro_new{i});
end
fclose(fid);
fid = fopen('texture.data','w');
for i = 1:size(list_text_new,1)
    fprintf(fid,'%s\n',list_text_new{i});
end
fclose(fid);
end